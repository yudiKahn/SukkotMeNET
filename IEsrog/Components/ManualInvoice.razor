@using IEsrog.Extensions
@using IEsrog.Models
@using IEsrog.Services
@using MongoDB.Bson
@inject AppStateService State

<style>
    body {
    font-family: 'Helvetica Neue', 'Helvetica', Helvetica, Arial, sans-serif;
    text-align: center;
    color: #777;
    }

    body h1 {
    font-weight: 300;
    margin-bottom: 0;
    padding-bottom: 0;
    color: #000;
    }

    body h3 {
    font-weight: 300;
    margin-top: 10px;
    margin-bottom: 20px;
    font-style: italic;
    color: #555;
    }

    body a {
    color: #06f;
    }

    .invoice-box {
    padding: 30px;
    border: 1px solid #eee;
    font-size: 16px;
    line-height: 24px;
    font-family: 'Helvetica Neue', 'Helvetica', Helvetica, Arial, sans-serif;
    color: #555;
    }

    table {
    width: 100%;
    height: 100%;
    line-height: inherit;
    text-align: left;
    border-collapse: collapse;
    }

    .invoice-box table td {
    padding: 5px;
    vertical-align: top;
    }

    .invoice-box table tr.top table td {
    padding-bottom: 20px;
    }

    .invoice-box table tr.top table td.title {
    font-size: 45px;
    line-height: 45px;
    color: #333;
    }


    .invoice-box table tr.heading td {
    background: #eee;
    border-bottom: 1px solid #ddd;
    font-weight: bold;
    }

    .invoice-box table tr.details td {
    padding-bottom: 20px;
    }

    .invoice-box table tr.item td {
    border-bottom: 1px solid #eee;
    }

    .invoice-box table tr.item.last td {
    border-bottom: none;
    }

    .invoice-box table tr.total td:nth-child(2) {
    border-top: 2px solid #eee;
    font-weight: bold;
    }

    @@media only screen and (max-width: 600px) {
    .invoice-box table tr.top table td {
    width: 100%;
    display: block;
    text-align: center;
    }
    }

</style>


<div style="margin: 10px auto; width:800px; height: 1500px;">
    <div class="sticky bg-green-500 text-white rounded-lg py-4 my-4 px-2 flex justify-between shadow-md overflow-x-auto">
        <div class="flex">
            <button @onclick="Save" class="px-2 py-1 mx-2 text-sm text-green-600 bg-white rounded-md flex items-center shadow-lg">
                <i class="fa fa-save"></i>&nbsp;Save
            </button>
            <i style="align-self: self-end">User and items are required</i>
        </div>

        @if (_FromOrder != null)
        {
            <button @onclick="() => _ViewOnly = !_ViewOnly" class="px-2 py-1 mx-2 text-sm text-green-600 bg-white rounded-md flex items-center shadow-lg">
                <i class="fa @(_ViewOnly ? "fa-edit" : "fa-file")"></i>&nbsp;@(_ViewOnly ? "Edit" : "Pdf")
            </button>
        }

        @if (!string.IsNullOrWhiteSpace(_Order.UserId))
        {
            <button @onclick="Reorder" class="px-2 py-1 mx-2 text-sm text-green-600 bg-white rounded-md flex items-center shadow-lg">
                Reorder
            </button>
        }
    </div>

    @if (_ViewOnly)
    {
        <div class="mx-auto w-full md:w-3/4 xl:w-1/2">
            <img src=@InvoicePdf class="w-full" alt="invoice" id="invoice-img" crossOrigin="Anonymous" />
        </div>
    }
    else
    {

        <div class="invoice-box">
            <div style="text-align: right;">ב"ה</div>
            <table>
                <tr class="top">
                    <td colspan="4">
                        <div style="text-align: center;">
                            <b>Yanky Kahn</b> | <b>818-605-2066</b> | <b>18253 Topham st. Tarzana CA 91335</b>
                        </div>
                    </td>
                </tr>

                <tr>
                    <td colspan="4">
                        <table>
                            <tr>
                                <td>
                                    <b>Customer information:</b><br />

                                    @if (!DisableUserSelection)
                                    {
                                        <div style="position: relative">
                                            <input placeholder="Recipient"
                                            @bind="NameFilter" @bind:event="oninput"
                                            style="position: absolute; width: calc(100% - 40px); border: none;" />

                                            <select style="outline: 0; width: 100%;"
                                            class="select-input"
                                            @onchange="OnUserChanged">
                                                <option value=""></option>
                                                @foreach (var user in _FilteredUsers.OrderBy(x => x.LastName))
                                                {
                                                    <option value="@user.Id">@user.LastName @user.FirstName</option>
                                                }
                                            </select>
                                        </div>
                                        <br />
                                    }
                                    @if (!string.IsNullOrWhiteSpace(FromOrder?.Recipient))
                                    {
                                        <div>@FromOrder.Recipient</div>
                                    }
                                    else if (FromOrder != null)
                                    {
                                        <div>@_User.FirstName @_User.LastName</div>
                                    }

                                    @if (!string.IsNullOrWhiteSpace(_User.Id))
                                    {
                                        @_User.Email
                                        <br />
                                        @_User.PhoneNumber
                                        <br />
                                        @_User.Address.ToString()
                                    }
                                    @if (!DisableUserSelection && _FilteredUsers.Count == 0)
                                    {
                                        <div>
                                            <i class="fa fa-check-circle-o"></i>
                                            Anonymous Invoice
                                        </div>
                                    }

                                </td>
                                <td></td>
                                <td style="text-align: right;">
                                    <br />
                                    Invoice: #@_Order.Id[..6]<br />
                                    Created: @($"{_Order.CreatedAt:MM/dd/yyyy}")<br />
                                </td>
                            </tr>
                        </table>
                    </td>
                </tr>

                <tr>
                    <td colspan="4">
                        <b>Orderd items:</b>
                    </td>
                </tr>

                <tr class="heading">
                    <td>Item</td>
                    <td>Qty</td>
                    <td>Price</td>
                    <td style="text-align: right;">Subtotal</td>
                </tr>

                @foreach (var item in _Order.Items)
                {
                    <tr>
                        <td style="position: relative">
                            <button @onclick="() => Remove(item)"
                            class="absolute -left-6 px-2 text-md text-white bg-red-500 rounded-md hover:bg-red-700">
                                -
                            </button>
                            <input @bind="item.Name"
                            style="position: absolute; width: calc(100% - 40px);" />
                            <select @onchange="e => OnProdChange(e, item)"
                            style="outline: 0;">
                                <option value=""></option>
                                @foreach (var prod in State.Products.OrderBy(x => x.Name))
                                {
                                    if (prod.Options is { Length: > 0 } options)
                                    {
                                        foreach (var opt in options)
                                        {
                                            <option value="@($"{prod.Id}~~~{opt}")">@prod.Name <small> @opt $@prod.Price</small></option>
                                        }
                                    }
                                    else
                                    {
                                        <option value="@prod.Id">@prod.Name <small>$@prod.Price</small></option>
                                    }
                                }
                            </select>
                            @if (!string.IsNullOrWhiteSpace(item.Option))
                            {
                                <small>@item.Option</small>
                            }
                        </td>
                        <td>
                            <input @bind="item.Qty" />
                        </td>
                        <td>
                            <input @bind="item.Price" />
                        </td>
                        <td style="text-align: right">
                            $@($"{item.Qty * item.Price:N2}")
                        </td>
                    </tr>
                }

                <tr class="total">
                    <td colspan="3">
                        <button @onclick="Add"
                        class="px-3 py-1 text-md text-white bg-green-500 rounded-md hover:bg-green-700">
                            +
                        </button>
                    </td>

                    <td style="text-align: right;">Total: $@($"{_Order.Items.GetTotal():N2}")</td>
                </tr>

                <tr class="heading">
                    <td colspan="2">Payment Method</td>

                    <td colspan="2"></td>
                </tr>

                <tr class="details">
                    <td colspan="2">
                        <input type="checkbox" /> Check <small>18253 topham st. Tarazana CA 91335</small>

                        <input type="checkbox" /> CashApp <small>8186052066</small>
                        <br />
                        <input type="checkbox" /> PayPal <small>chabad18@hotmail.com</small>

                        <input type="checkbox" /> Zelle <small>chabad18@hotmail.com</small>
                    </td>

                    <td colspan="2"></td>
                </tr>

                <tr class="heading">
                    <td colspan="2">Shipment price <small>(Without schach)</small></td>

                    <td colspan="2" style="text-align: right;">
                        $
                        <input type="number" @bind="_Order.ShippingCost"
                        style="background: inherit; text-align: end;" />
                    </td>
                </tr>
            </table>
            <div style="text-align: center;">
                <h4>Thank's for your buisness</h4>
            </div>
            <div style="text-align: left;">
                <small>Order id: # @_Order.Id</small>
            </div>
        </div>
    }
</div>


<CopyOrderPopup @ref="_CopyOrder" />

@code
{
    [Inject] IJSRuntime Js { get; set; } = null!;

    [Inject] InvoiceService InvoiceService { get; set; } = null!;
    [Inject] MainStateService MainService { get; set; } = null!;

    [Parameter]
    public Action<Order, User>? OnSave { get; set; }

    CopyOrderPopup _CopyOrder = null!;
    Order? _FromOrder;

    [Parameter]
    public Order? FromOrder
    {
        get => _FromOrder;
        set
        {
            _FromOrder = value;
            if (value != null)
            {
                _Order = value.Clone();
                if (!string.IsNullOrWhiteSpace(_Order.UserId))
                {
                    _User = State.AdminState.AllUsers
                        .First(u => u.Id == _Order.UserId)
                        .Clone();
                }
            }
        }
    }

    [Parameter]
    public bool DisableUserSelection { get; set; } = false;

    string? _InvoicePdf;
    public string InvoicePdf
    {
        get => _InvoicePdf ?? string.Empty;
        set => _InvoicePdf = value;
    }

    Order _Order = new();
    User _User = new();
    List<User> _FilteredUsers = new();
    bool _ViewOnly = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _Order.Id = ObjectId.GenerateNewId().ToString();
        _Order.CreatedAt = DateTime.Now;
        _FilteredUsers = State.AdminState.AllUsers;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (_FromOrder is { } order)
        {
            const int height = 1500;
            const int width = 800;

            var user = _User;

            var html = InvoiceService.GetInvoiceHtml(order, user);
            InvoicePdf = await Js.InvokeAsync<string>(
                Constants.JavaScriptFunctions.GetImageFromHTML,
                html, width, height
            );
        }
    }

    void Save()
    {
        OnSave?.Invoke(_Order, _User);
    }
    void OnProdChange(ChangeEventArgs e, OrderItem item)
    {
        const string del = "~~~";
        if (e.Value is not string pid || string.IsNullOrWhiteSpace(pid)) return;

        string? opt = null;
        if (pid.Contains(del))
        {
            var s = pid.Split(del);
            pid = s[0];
            opt = s[1];
        }

        var prod = State.Products.First(p => p.Id == pid).Clone();
        item.Name = prod.Name;
        item.Price = prod.Price;
        item.ProductId = prod.Id;
        item.PriceType = prod.PricesType;
        item.Category = prod.Category;
        item.Option = opt;
    }

    void Add() => _Order.Items.Add(new OrderItem() { ProductId = string.Empty });

    void Remove(OrderItem item) => _Order.Items.Remove(item);

    void OnUserChanged(ChangeEventArgs e)
    {
        if (e.Value is not string uid || string.IsNullOrWhiteSpace(uid)) return;

        var user = State.AdminState.AllUsers.First(u => u.Id == uid).Clone();
        _User = user;
        _Order.UserId = user.Id;
    }

    void Reorder()
    {
        var uid = _User?.Id;
        if(string.IsNullOrWhiteSpace(uid))
            return;

        var allOrders = State.AdminState.AllOrders
            .Where(o => o.UserId == uid && (_FromOrder is null || o.Id != _FromOrder.Id))
            .OrderBy(o => o.CreatedAt)
            .ToArray();

        //var items = MainService.GetLastYearOrder(uid);
        
        _CopyOrder.Show(allOrders);
        // _Order.Items.AddOrMergeRange(items.ToArray());
    }

    #region Property: NameFilter

    string _NameFilter = string.Empty;

    public string NameFilter
    {
        get => _NameFilter;
        set
        {
            _NameFilter = value;

            _FilteredUsers = State.AdminState.AllUsers
                .Where(u => $"{u.FirstName}{u.LastName}".Contains(value, StringComparison.InvariantCultureIgnoreCase))
                .ToList();

            if (_FilteredUsers.Count == 0)
            {
                _Order.Recipient = value;
            }
            else
            {
                _Order.Recipient = null;
            }
        }
    }

    #endregion
}