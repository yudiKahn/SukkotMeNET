@using IEsrog.Extensions
@using IEsrog.Models



@if (Item != null)
{
    <div class="@(InSlider ? string.Empty : "w-full sm:w-1/2 md:w-1/3 xl:w-1/4 p-4")">
        <div class="flex flex-col space-y-4 justify-between c-card block w-full h-full bg-white shadow-md hover:shadow-xl rounded-lg overflow-hidden">
            <div>
                <img class="inset-0 object-contain mx-auto" style="width:200px; height:200px;"
                     src=@Item.GetItemIcon() alt="logo" />
            </div>

            @if (Item.Options?.Length > 1)
            {
                <div class="relative flex mx-3 my-1 flex-col rounded-xl bg-white bg-clip-border shadow-md"
                    style="width: fit-content;">
                    <nav class="flex flex-row gap-1">
                        @foreach (var o in Item.Options)
                        {
                            <button @onclick="() => _SelectedOption = o"
                                    class="@(_SelectedOption == o ? "bg-green-500 text-white" : "") flex items-center p-0 transition-all rounded-lg border-none">
                                <label class="flex items-center w-full px-3 py-2 text-sm">
                                    @o
                                </label>
                            </button>
                        }
                    </nav>
                </div>
            }
            @if (Item.ExtraOptions?.Length > 0)
            {
                <div class="relative flex mx-3 my-1 flex-col rounded-xl bg-white bg-clip-border shadow-md"
                     style="width: fit-content;">
                    <nav class="flex flex-row gap-1">
                        @foreach (var o in Item.ExtraOptions)
                        {
                            <button @onclick="() => ToggleExOption(o.Option)"
                                    class="@(_SelectedExOption == o.Option ? "bg-green-500 text-white" : "") flex items-center p-0 transition-all rounded-lg border-none">
                                <label class="flex items-center w-full px-3 py-2 text-sm">
                                    @(o.Option) - $@(o.Price)
                                </label>
                            </button>
                        }
                    </nav>
                </div>
            }

            <div class="p-3 items-center text-sm text-gray-600">
                <h5 class="font-bold">
                    @Item.Name
                    @if (!string.IsNullOrEmpty(Item.PricesType))
                    {
                        <i style="font-weight: normal;"> - @Item.PricesType</i>
                    }
                </h5>

                @* <p class="my-1">@Product.Prices.GetFriendlyRange('$')</p> *@
                <p class="my-1">$@Item.Price</p>

                @if (!ForOrderWithId)
                {
                    @if (Qty > 0)
                    {
                        <button @onclick="OnSubtractItem" type="button" class="font-medium bg-green-500 hover:bg-green-700 text-white py-1 px-2 rounded">
                            <i class="fas fa-minus"></i>
                        </button>
                        <input class="px-3 w-1/4" type="number" @bind="BindQty"/>
                    }
                    <button @onclick="() => OnAddItem()" class="font-medium bg-green-500 hover:bg-green-700 text-white py-1 px-2 rounded">
                        <i class="fas fa-plus"></i>
                    </button>
                }
                else
                {
                    <button @onclick="() => OnAddItem()" class="font-medium bg-green-500 hover:bg-green-700 text-white py-1 px-2 rounded">
                        Add to order
                    </button>
                }
            </div>
        </div>
    </div>

}

@code {
    [Parameter]
    public Product? Item { get; set; }

    [Parameter]
    public int Qty { get; set; }

    [Parameter]
    public bool ForOrderWithId { get; set; }

    [Parameter]
    public Action<Product, int, int,bool, ExtraOptions?>? AddItem { get; set; }

    [Parameter]
    public Action<Product, int, int>? SubtractItem { get; set; }

    string _SelectedOption = string.Empty;
    
    string _SelectedExOption = string.Empty;

    [Parameter] 
    public bool InSlider { get; set; }

    int _BindQty;

    int BindQty
    {
        get => _BindQty;
        set
        {
            if(value < 0) return;

            _BindQty = value;
            OnAddItem(value, true);
        }
    }

    void ToggleExOption(string option)
    {
        _SelectedExOption = _SelectedExOption != option ? option : string.Empty;
    }

    void OnAddItem(int n = 1,bool toOverride = false)
    {
        if (AddItem is null) return;

        if (!toOverride)
        {
            _BindQty += n;
            StateHasChanged();
        }

        var optInx = Item?.Options.ToList().IndexOf(_SelectedOption) ?? 0;
        var opt = Item?.ExtraOptions?.FirstOrDefault(o => o.Option == _SelectedExOption);
        AddItem.Invoke(Item!, optInx, n, toOverride, opt);
    }

    void OnSubtractItem()
    {
        if (SubtractItem is null) return;
        _BindQty -= 1;
        StateHasChanged();

        var optInx = Item?.Options.ToList().IndexOf(_SelectedOption) ?? 0;
        SubtractItem.Invoke(Item!, optInx, -1);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (!firstRender) return;

        _BindQty = Qty;
        if (Item?.Options.Length > 1)
        {
            _SelectedOption = Item?.Options.First()!;
        }
        StateHasChanged();
    }
}
