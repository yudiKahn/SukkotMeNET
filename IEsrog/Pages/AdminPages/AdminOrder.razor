@page "/admin/order"
@page "/admin/order/{orderId}"
@inherits PageBase
@using MongoDB.Bson
@using IEsrog.Models
@using IEsrog.Services
@using IEsrog.Components


@* <button @onclick="FixProdId">FIX PROD ID</button> *@

<ManualInvoice OnSave="Save" FromOrder="Order" DisableUserSelection="true"/>

@code {
    [Parameter] public string? OrderId { get; set; }

    [Inject] AppStateService State { get; set; } = null!;

    [Inject] NavigationManager NavManager { get; set; } = null!;


    Order? _Order;

    public Order? Order
    {
        get => _Order;
        set => SetProperty(ref _Order, value);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (ObjectId.TryParse(OrderId, out _))
        {
            try
            {
                Order = State.AdminState.AllOrders.FirstOrDefault(o => o.Id == OrderId);
                if (Order is null)
                    throw new Exception();
            }
            catch
            {
            }
        }
        else
        {
        }
    }

    async void Save(Order order, User user)
    {
        try
        {
            await MainService.UpdateOrder(order, user);

            MainService.AddAlert(new Alert("Success", "Order updated!", AlertType.Success));

            NavManager.NavigateTo("/admin/orders");
        }
        catch (Exception e)
        {
            MainService.AddAlert(new Alert("Failed", "Failed to update order", AlertType.Error));
        }
    }

    async void FixProdId()
    {
        if(_Order is null) return;

        var prods = State.Products.ToDictionary(k => k.Name.ToLower() + k.PricesType.ToLower() + k.Price);
        foreach (var p in _Order.Items)
        {
            if (!string.IsNullOrWhiteSpace(p.ProductId)) continue;

            if (prods.TryGetValue(p.Name.ToLower() + p.PriceType?.ToLower() + p.Price, out var x))
            {
                p.ProductId = x.Id;
            }

        }

        Save(_Order, State.User);
    }
}
