    @page "/admin/orders"
@page "/admin/orders/{userId}"
@using IEsrog.Extensions
@using IEsrog.Models
@using IEsrog.Services
@inherits PageBase
@inject AppStateService _State

<section class="py-1 bg-blueGray-50 relative">
    <div class="sticky p-3 top-24 z-10 bg-green-600 rounded-r-lg w-1/2 md:w-1/4 lg:w-1/6 text-white shadow-xl">
        <b>This year:</b> 
        @(_Orders.Where(o => 
                            o.Order.CreatedAt.Year == DateTime.Now.Year &&
                            (string.IsNullOrEmpty(FilterName) ||
                            (o.Order.Recipient ?? o.User.ToString()).Contains(FilterName, StringComparison.InvariantCultureIgnoreCase)))
                .SelectMany(o => o.Order.Items)
                .GetTotal()
                .ToString("N2"))$
    </div>
    <div class="w-full xl:w-8/12 mb-12 xl:mb-0 px-4 mx-auto mt-24">
        <div class="relative flex flex-col min-w-0 break-words bg-white w-full mb-6 shadow-lg rounded ">
            <div class="rounded-t mb-0 px-4 py-3 border-0">
                <div class="flex flex-wrap items-center">
                    <div class="relative w-full px-4 max-w-full flex-grow flex-1">
                        <h3 class="font-semibold text-base text-blueGray-700">Orders</h3>
                    </div>
                </div>
            </div>

            <div class="rounded-t mb-0 px-4 py-3 border-0">
                <div class="flex flex-wrap items-center">
                    <div class="relative w-full px-4 max-w-full flex-grow flex-1">
                        <input placeholder="Filter by name" @bind="FilterName" @bind:event="oninput"
                               class="p-3 appearance-none block w-full md:w-1/2 text-gray-700 rounded leading-tight"/>
                    </div>
                </div>
            </div>

            <div class="block w-full overflow-x-auto">
                <table class="items-center bg-transparent w-full border-collapse ">
                    <thead>
                    <tr>
                        <th class="px-6 bg-blueGray-50 text-blueGray-500 align-middle border border-solid border-blueGray-100 py-3 text-xs uppercase border-l-0 border-r-0 whitespace-nowrap font-semibold text-left">
                            Date
                        </th>
                        <th class="px-6 bg-blueGray-50 text-blueGray-500 align-middle border border-solid border-blueGray-100 py-3 text-xs uppercase border-l-0 border-r-0 whitespace-nowrap font-semibold text-left">
                            User
                        </th>
                        <th class="px-6 bg-blueGray-50 text-blueGray-500 align-middle border border-solid border-blueGray-100 py-3 text-xs uppercase border-l-0 border-r-0 whitespace-nowrap font-semibold text-left">
                            View
                        </th>
                    </tr>
                    </thead>

                    <tbody>
                        @foreach (var o in _Orders)
                    {
                        @if (!string.IsNullOrEmpty(UserId) && o.Order.UserId != UserId) continue;

                        var show = string.IsNullOrEmpty(FilterName) ||
                                   (o.Order.Recipient ?? o.User.ToString()).Contains(FilterName, StringComparison.InvariantCultureIgnoreCase);

                        <tr hidden="@(!show)">
                            <th class="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4 text-left text-blueGray-700">
                                @(o.Order.CreatedAt == default ? "2019/20" : o.Order.CreatedAt.ToString("dd MMM yyyy hh:mm"))
                            </th>
                            <td class="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4">
                                @(o.Order.Recipient ?? o.User.ToString())
                            </td>
                            <td class="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4">
                                <NavLink href=@string.Format($"/admin/order/{o.Order.Id}")>
                                    <i class="fa fa-external-link"></i>
                                </NavLink>
                            </td>
                        </tr>
                        <tr hidden="@(!show)">
                            <td class="w-full px-6 py-2 relative" colspan="3">
                                <button @onclick="() => DeleteOrder(o.Order)" class="bg-red-400 hover:bg-red-500 text-white font-bold text-sm py-1 px-2 rounded-full">
                                    Delete
                                </button>

                                <button @onclick="() => SendInvoice(o.Order)" class="bg-green-600 hover:bg-green-700 text-white font-bold text-sm py-1 px-2 rounded-full">
                                    Send Invoice
                                </button>

                                <button class="mt-1 bg-green-600 hover:bg-green-700 text-white font-bold text-sm py-1 px-2 rounded-full">
                                    Payment reminder
                                </button>

                                <button @onclick="() => ToggleOrderStatus(o.Order, nameof(Order.IsPacked))"
                                        disabled=@_IsUpdatingStatus
                                        class=@_BtnsClass>
                                    <i class=@($"fa fa-{(o.Order.IsPacked ? "check" : "times")}")></i>
                                    Packed
                                </button>

                                <button @onclick="() => ToggleOrderStatus(o.Order, nameof(Order.IsShipped))"
                                        disabled=@_IsUpdatingStatus
                                        class=@_BtnsClass>
                                    <i class=@($"fa fa-{(o.Order.IsShipped ? "check" : "times")}")></i>
                                    Shipped
                                </button>

                                <button @onclick="() => ToggleOrderStatus(o.Order, nameof(Order.IsPaid))"
                                        disabled=@_IsUpdatingStatus
                                        class=@_BtnsClass>
                                    <i class=@string.Format("fa fa-{0}", o.Order.IsPaid ? "check" : "times")></i>
                                    Paid
                                </button>

                                <button @onclick="() => SetShipmentPrice(o.Order.Id)"
                                        disabled=@_IsUpdatingStatus
                                        class=@_BtnsClass>
                                    Shipment price
                                </button>
                            </td>
                        </tr>


                    }
                    </tbody>

                </table>
            </div>
        </div>
    </div>
</section>

@code {
    [Parameter] public string? UserId { get; set; }
    [Inject] IJSRuntime _Js { get; set; }

    bool _IsUpdatingStatus;
    string _BtnsClass = "mt-1 bg-green-600 hover:bg-green-700 text-white font-bold text-sm py-1 px-2 rounded-full";

    List<(Order Order, User User)> _Orders;
    protected override void OnInitialized()
    {
        base.OnInitialized();

        _Orders = _State.AdminState.AllOrders
            .Join(
            _State.AdminState.AllUsers,
            o => o.UserId,
            u => u.Id,
            (o, u) => new
            {
                User = u,
                Order = o
            })
            .OrderByDescending(o => o.Order.CreatedAt)
            .Select(o => (o.Order, o.User))
            .ToList();
    }

    string _FilterName = "";

    public string FilterName
    {
        get => _FilterName;
        set => SetProperty(ref _FilterName, value);
    }

    async void DeleteOrder(Order order)
    {
        if (await _Js.InvokeAsync<bool>(Constants.JavaScriptFunctions.Confirm, "To delete order?"))
        {
            var ok = await MainService.RemoveOrderAsync(order);
            MainService.AddAlert(new Alert(ok ? "Removed" : "Error #004", ok ? "" : "Cannot remove order", ok ? AlertType.Success : AlertType.Error));
        }
    }

    async void SendInvoice(Order order)
    {
        var user = _State.AdminState.AllUsers.FirstOrDefault(u => u.Id == order.UserId);

        if (user != null && await _Js.InvokeAsync<bool>(Constants.JavaScriptFunctions.Confirm, $"To send invoice to {user.Email}?"))
        {
            var didSend = await MainService.SendInvoiceFromAdminAsync(order, user);
        }
    }

    async void ToggleOrderStatus(Order order, string prop)
    {
        _IsUpdatingStatus = true;
        _BtnsClass = "opacity-75 mt-1 bg-green-600 hover:bg-green-700 text-white font-bold text-sm py-1 px-2 rounded-full";
        await MainService.ToggleOrderStatus(order, prop);
        _IsUpdatingStatus = false;
        _BtnsClass = "mt-1 bg-green-600 hover:bg-green-700 text-white font-bold text-sm py-1 px-2 rounded-full";

        StateHasChanged();
    }

    async void SetShipmentPrice(string oId)
    {
        var price = await _Js.InvokeAsync<string>(Constants.JavaScriptFunctions.Prompt, "Please enter shipment price");

        if (double.TryParse(price, out var p))
        {
            await MainService.SetShipmentPrice(oId, p);
        }
    }
}
