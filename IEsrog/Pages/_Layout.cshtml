@using Microsoft.AspNetCore.Components.Web
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="theme-color" content="#059669">
    <base href="~/" />
    <link href="css/site.css" rel="stylesheet" />
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.0.2/tailwind.min.css">
</head>
<body>

    @RenderBody()
    <script src="_framework/blazor.server.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/alpinejs/2.8.0/alpine.js"></script>
    <script src="https://kit.fontawesome.com/dbd1de3adf.js" crossorigin="anonymous"></script>
    <script language="javascript">

        // const selectInputs = document.querySelectorAll('.select-input');
        // selectInputs.forEach(inp => {
        //     inp.addEventListener('focus', ev => {
        //         console.log("here!!!");
        //     })
        // })

        function GetImageFromHTML(html, width, height) {
            const data = `<svg xmlns="http://www.w3.org/2000/svg" width="${width}px" height="${height}px">
                                                                                                                                    <foreignObject width="100%" height="100%">${html}</foreignObject>
                                                                                                                                </svg>`;

            const domUrl = window.URL || window.webkitURL || window;

            const svg = new Blob([data],
                {
                    type: 'image/svg+xml;charset=utf-8'
                });

            return domUrl.createObjectURL(svg);
        }

        function PrintImageFromHTML(html, width, height){
            let blob = GetImageFromHTML(html, width, height);

            iframe =  document.createElement('iframe');
            document.body.appendChild(iframe);

            iframe.style.display = 'none';
            iframe.src = blob;
            iframe.onload = function() {
                setTimeout(function() {
                    iframe.focus();
                    iframe.contentWindow.print();
                }, 1);
            };
        }

        function RenderStockChart(options) {
            if (document.getElementById("column-chart") && typeof ApexCharts !== 'undefined') {
                const chart = new ApexCharts(document.getElementById("column-chart"), options);
                chart.render();
            }
        }

    </script>
</body>
</html>