@page "/shop"
@using SukkotMeNET.Extensions
@using SukkotMeNET.Models
@using SukkotMeNET.Services
@using MongoDB.Bson
@using SukkotMeNET.Components
@inherits PageBase
@inject AppStateService State
@attribute [Authorize(Policy = Constants.Policies.IsUser)]

@* <div class="bg-green-500 place-content-center hover:bg-green-700 text-white sticky top-0 relative p-4 flex flex-wrap">
    
    <div class="align-center">Get a 10% Discount now!</div>
    <div class="coupun mx-2">10% off</div>
</div> *@


<div class="antialiased bg-gray-200 dark:bg-gray-800 text-gray-900 font-sans p-6 flex-grow">
    <div class="container mx-auto">
        <div class="flex flex-wrap -mx-4">
            @foreach (var item in State.ShopItems.OrderBy(i => i.Name))
            {
                if(item.Prices.All(p => p <= 0)) continue;

                if (item.Prices.Length > 1)
                {
                    <Slider>
                        @for (var i = 0; i < item.Prices.Length; i++)
                        {
                            <ItemCard 
                                Item="item"
                                Qty="@(State.Cart.Items.FirstOrDefault(i => i.Id == item.Id)?.Qty ?? 0)"
                                ForOrderWithId="@(!string.IsNullOrWhiteSpace(ForOrderWithId))"
                                AddItem="AddItem"
                                SubtractItem="SubtractItem"
                                PriceOption="i"
                            />
                        }
                    </Slider>
                }
                else
                {
                    <ItemCard 
                        Item="item"
                        Qty="@(State.Cart.Items.FirstOrDefault(i => i.Id == item.Id)?.Qty ?? 0)"
                        ForOrderWithId="@(!string.IsNullOrWhiteSpace(ForOrderWithId))"
                        AddItem="AddItem"
                        SubtractItem="SubtractItem"
                    />
                }
            }
        </div>
    </div>
</div>
@* 
@if (_SelectedItem != null)
{
    <div class="fixed w-full h-full top-0 z-50 bg-opacity-50 bg-white" @onclick="() => SelectItem(null)">
        <div class="grid justify-center w-full h-full">
            <div class="w-full mt-5 lg:self-center">
                <div @onclick:stopPropagation="true" class="relative z-10 h-auto py-10 px-7 bg-white dark:bg-gray-800 border-b-2 border-gray-300 dark:border-gray-900 rounded-lg shadow-2xl">
                    @if (_SelectedItem.Name.ToLower().Contains("schach"))
                    {
                        <span class="absolute top-0 right-0 px-2 py-1 -mt-3 -mr-6 text-sm font-medium leading-tight text-white bg-red-600 rounded-full">
                            No Delivery!
                        </span> 
                    }
                    <EditForm Model="@OrderItem" OnSubmit="@OnSubmit">
                        <h3 class="mb-6 text-2xl font-medium dark:text-gray-300">
                            @_SelectedItem.Name
                        </h3>
                        <select @onchange="e => OnPriceSelectChange(Convert.ToInt32(e.Value))"
                                required class="block w-full px-4 py-3 mb-4 border border-2 border-transparent border-gray-200 rounded-lg focus:ring focus:ring-green-500 focus:outline-none">
                            @for (int i = 0; i < _SelectedItem.Prices.Length; i++)
                            {
                                <option value="@i">
                                    $@_SelectedItem.Prices[i]
                                    @if (_SelectedItem.PricesTypes.ElementAtOrDefault(i) != null)
                                    {
                                        <span> - @_SelectedItem.PricesTypes[i]</span>
                                    }
                                </option>
                            }
                        </select>
                        @if (_SelectedItem.Options.Length > 1)
                        {
                            <select @bind="OrderItem.Option" required class="block w-full px-4 py-3 mb-4 border border-2 border-transparent border-gray-200 rounded-lg focus:ring focus:ring-green-500 focus:outline-none">
                                @foreach (var option in _SelectedItem.Options)
                                {
                                    <option value="@option">@option</option>
                                }
                            </select>
                        }

                        <span class="relative inline-flex w-full">
                            <input required type="number" min="1" placeholder="Qty" @bind-value="OrderItem.Qty"
                                   class="block w-full px-4 py-3 mb-4 border border-2 border-transparent border-gray-200 rounded-lg focus:ring focus:ring-green-500 focus:outline-none"/>
                        </span>

                        <div class="block">
                            <button class="w-full px-3 py-4 font-medium text-white bg-green-600 rounded-lg" type="submit">
                                @string.Format(string.IsNullOrEmpty(ForOrderWithId) ? "Add To Cart" : "Add To Order")
                            </button>
                            <button type="button" @onclick="() => SelectItem(null)" class="w-full px-3 pt-3 font-medium text-gray-600 dark:text-gray-400">
                                Back
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
} *@

@code {
    [Parameter]
    public string? ForOrderWithId { get; set; }

    [Parameter]
    public string? ForUserId { get; set; }

    OrderItem OrderItem = new OrderItem();

    async void AddItem(Item item, int priceInx, int n = 1)
    {
        if(item.Prices.Length < priceInx + 1) return;

        var priceType = item.PricesTypes.Any() ? item.PricesTypes[priceInx] : string.Empty;
        OrderItem.Id = item.Id;
        OrderItem.Qty = n;
        OrderItem.Price = item.Prices[priceInx];
        OrderItem.PriceType = priceType;
        OrderItem.Option = item.Options.FirstOrDefault(); //todo:
        OrderItem.Name = item.Name;
        OrderItem.Category = item.Category;

        if (!string.IsNullOrEmpty(ForOrderWithId))
        {
            if (ObjectId.TryParse(ForOrderWithId, out _))
            {
                _ = await MainService.AddItemToOrder(OrderItem, ForOrderWithId);
            }
        }
        else if (!string.IsNullOrWhiteSpace(ForUserId))
        {
            _ = await MainService.AddItemToCart(OrderItem, ForUserId);
        }
        else
        {
            _ = await MainService.AddItemToCart(OrderItem);
        }
    }

    async void SubtractItem(Item item, int priceInx, int n = 1)
    {
        if (item.Prices.Length < priceInx + 1) return;

        var priceType = item.PricesTypes.Any() ? item.PricesTypes[priceInx] : string.Empty;
        OrderItem.Id = item.Id;
        OrderItem.Qty = -Math.Abs(n);
        OrderItem.Price = item.Prices[priceInx];
        OrderItem.PriceType = priceType;
        OrderItem.Option = item.Options.FirstOrDefault(); //todo:
        OrderItem.Name = item.Name;
        OrderItem.Category = item.Category;

        if (!string.IsNullOrEmpty(ForOrderWithId))
        {
            if (ObjectId.TryParse(ForOrderWithId, out _))
            {
                _ = await MainService.AddItemToOrder(OrderItem, ForOrderWithId);
            }
        }
        else if (!string.IsNullOrWhiteSpace(ForUserId))
        {
            _ = await MainService.AddItemToCart(OrderItem, ForUserId);
        }
        else
        {
            _ = await MainService.AddItemToCart(OrderItem);
        }
    }

}
