@page "/shop"
@using SukkotMeNET.Extensions
@using SukkotMeNET.Models
@using SukkotMeNET.Services
@using MongoDB.Bson
@using SukkotMeNET.Components
@inherits PageBase
@inject AppStateService State
@attribute [Authorize(Policy = Constants.Policies.IsUser)]

@* <div class="bg-green-500 place-content-center hover:bg-green-700 text-white sticky top-0 relative p-4 flex flex-wrap">

    <div class="align-center">Get a 10% Discount now!</div>
    <div class="coupun mx-2">10% off</div>
</div> *@


<div class="antialiased bg-gray-200 dark:bg-gray-800 text-gray-900 font-sans p-6 flex-grow">
    <div class="container mx-auto">
        <div class="flex flex-wrap -mx-4">
            @foreach (var item in State.ShopItems.OrderBy(i => i.Name))
            {
                if (item.Prices.All(p => p <= 0)) continue;

                if (item.Prices.Length > 1)
                {
                    <Slider>
                        @for (var i = 0; i < item.Prices.Length; i++)
                        {
                            var tmpVal = i;

                            <ItemCard Item="item"
                                      Qty="@(State.Cart.Items.Where(it => it.Id == item.Id && Math.Abs(it.Price - item.Prices[tmpVal]) < 0.1).Sum(x => x.Qty))"
                                      ForOrderWithId="@(!string.IsNullOrWhiteSpace(ForOrderWithId))"
                                      AddItem="AddItem"
                                      SubtractItem="SubtractItem"
                                      PriceOption="i" />
                        }
                    </Slider>
                }
                else
                {
                    <ItemCard Item="item"
                              Qty="@(State.Cart.Items.FirstOrDefault(i => i.Id == item.Id)?.Qty ?? 0)"
                              ForOrderWithId="@(!string.IsNullOrWhiteSpace(ForOrderWithId))"
                              AddItem="AddItem"
                              SubtractItem="SubtractItem" />
                }
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string? ForOrderWithId { get; set; }

    [Parameter]
    public string? ForUserId { get; set; }

    OrderItem OrderItem = new OrderItem();

    async void AddItem(Item item, int priceInx, int optInx, int n = 1, bool toOverride = false)
    {
        if (item.Prices.Length < priceInx + 1) return;

        var priceType = item.PricesTypes.Any() ? item.PricesTypes[priceInx] : string.Empty;

        string? opt = null;
        if (optInx > -1 && item.Options.Length > optInx)
        {
            opt = item.Options[optInx];
        }
        OrderItem.Id = item.Id;
        OrderItem.Qty = n;
        OrderItem.Price = item.Prices[priceInx];
        OrderItem.PriceType = priceType;
        OrderItem.Option = opt;
        OrderItem.Name = item.Name;
        OrderItem.Category = item.Category;

        if (!string.IsNullOrEmpty(ForOrderWithId))
        {
            if (ObjectId.TryParse(ForOrderWithId, out _))
            {
                _ = await MainService.AddItemToOrder(OrderItem, ForOrderWithId);
            }
        }
        else if (!string.IsNullOrWhiteSpace(ForUserId))
        {
            _ = await MainService.AddItemToCart(OrderItem, ForUserId, toOverride);
        }
        else
        {
            _ = await MainService.AddItemToCart(OrderItem, null, toOverride);
        }
    }

    async void SubtractItem(Item item, int priceInx, int optInx, int n = 1)
    {
        if (item.Prices.Length < priceInx + 1) return;
        string? opt = null;
        if (optInx > -1 && item.Options.Length > optInx)
        {
            opt = item.Options[optInx];
        }
        var priceType = item.PricesTypes.Any() ? item.PricesTypes[priceInx] : string.Empty;
        OrderItem.Id = item.Id;
        OrderItem.Qty = -Math.Abs(n);
        OrderItem.Price = item.Prices[priceInx];
        OrderItem.PriceType = priceType;
        OrderItem.Option = opt; //todo:
        OrderItem.Name = item.Name;
        OrderItem.Category = item.Category;

        if (!string.IsNullOrEmpty(ForOrderWithId))
        {
            if (ObjectId.TryParse(ForOrderWithId, out _))
            {
                _ = await MainService.AddItemToOrder(OrderItem, ForOrderWithId);
            }
        }
        else if (!string.IsNullOrWhiteSpace(ForUserId))
        {
            _ = await MainService.AddItemToCart(OrderItem, ForUserId);
        }
        else
        {
            _ = await MainService.AddItemToCart(OrderItem);
        }
    }

}
