@page "/shop"
@using SukkotMeNET.Models
@using SukkotMeNET.Services
@using MongoDB.Bson
@using SukkotMeNET.Components
@inherits PageBase
@inject AppStateService State
@attribute [Authorize(Policy = Constants.Policies.IsUser)]

<div class="antialiased bg-gray-200 dark:bg-gray-800 text-gray-900 font-sans p-6 flex-grow">
    <div class="container mx-auto relative">

        <div class="sticky bg-green-500 text-white rounded-lg py-4 px-2 flex shadow-md overflow-x-auto">
            <button @onclick="CopyOrder" class="px-2 py-1 mx-2 text-sm text-green-600 bg-white rounded-md flex items-center shadow-lg">
                <i class="fa fa-repeat"></i>&nbsp;Reorder
            </button>

            @if (State.User.IsAdmin)
            {
                <button @onclick="SelectUser" class="px-2 py-1 mx-2 text-sm text-green-600 bg-white rounded-md flex items-center shadow-lg">
                    <i class="fa fa-user"></i>&nbsp;
                    @if (State.ForUser is { } fu)
                    {
                        <span>For @($"{fu.FirstName} {(fu.LastName.Length > 0 ? fu.LastName[0] : string.Empty)}.")</span>
                    }
                    else
                    {
                        <span>For User</span>
                    }
                </button>
            }
            @* <div class="align-center">Get a 10% Discount now!</div>
            <div class="coupun mx-2">10% off</div> *@
        </div>

        <div class="flex flex-wrap -mx-4">
            @foreach (var items in State.ShopItems
            .GroupBy(i => i.Group)
            .OrderBy(grp => grp.First().Name))
            {
                if (items.Sum(i => i.Price) <= 0.00)
                {
                    continue;
                }
                if (items.Count() > 1)
                {
                    <Slider>
                        @foreach (var i in items)
                        {
                            <ItemCard Item="i"
                                      Qty="@(State.Cart.Items.Where(it => it.Id == i.Id).Sum(x => x.Qty))"
                                      ForOrderWithId="@(!string.IsNullOrWhiteSpace(ForOrderWithId))"
                                      AddItem="AddItem"
                                      SubtractItem="SubtractItem"
                                      InSlider="true"/>
                        }
                    </Slider>
                }
                else
                {
                    var i = items.First();

                    <ItemCard Item="i"
                              Qty="@(State.Cart.Items.FirstOrDefault(it => it.Id == i.Id)?.Qty ?? 0)"
                              ForOrderWithId="@(!string.IsNullOrWhiteSpace(ForOrderWithId))"
                              AddItem="AddItem"
                              SubtractItem="SubtractItem"
                              InSlider="false"/>
                }
            }
        </div>
    </div>
</div>

<CopyOrderPopup @ref="_CopyOrder" />

@if (IsInUserSelection)
{
    <div class="fixed p-5 w-screen h-screen top-0 z-50 bg-black bg-opacity-50" @onclick="() => IsInUserSelection = false">
        <div class="relative w-full h-full">
            <div @onclick:stopPropagation="true"
                 class="rounded-md shadow-xl absolute bg-white inset-1/2 transform -translate-x-1/2 -translate-y-1/2 w-full h-2/3 md:w-2/3 overflow-y-auto">
                <div class="rounded-t mb-0 px-4 py-3 border-0">
                    <div class="flex flex-wrap items-center">
                        <div class="relative w-full px-4 max-w-full flex-grow flex-1">
                            <input placeholder="Filter by name" @bind="FilterName" @bind:event="oninput"
                                   class="p-3 appearance-none block w-full md:w-1/2 text-gray-700 rounded leading-tight" />
                        </div>
                    </div>
                </div>
                <div>
                    <ul class="h-full overflow-y-auto">
                        @foreach (var user in State.AdminState.AllUsers.OrderBy(u => $"{u.FirstName}{u.LastName}"))
                        {
                            <li hidden="@(!string.IsNullOrEmpty(FilterName) && !$"{user.FirstName.ToLower()} {user.LastName.ToLower()}".Contains(FilterName.ToLower()))"
                                class="px-3 py-4" @onclick="() => SelectUser(user)">
                                <div class="flex">
                                    <input id="@user.Id" type="radio" name="usrs-grp" class="flex-none w-20" />
                                    <label for="@user.Id" class="flex-none w-80">@user.FirstName @user.LastName</label>
                                </div>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string? ForOrderWithId { get; set; }

    [Parameter]
    public string? ForUserId { get; set; }

    public bool IsInUserSelection { get; set; }

    public string FilterName { get; set; }

    CopyOrderPopup _CopyOrder;

    OrderItem OrderItem = new OrderItem();

    async void AddItem(Product product, int optInx, int n = 1, bool toOverride = false)
    {
        string? opt = null;
        if (optInx > -1 && product.Options?.Length > optInx)
        {
            opt = product.Options[optInx];
        }
        OrderItem.Id = product.Id;
        OrderItem.Qty = n;
        OrderItem.Price = product.Price;
        OrderItem.PriceType = product.PricesType;
        OrderItem.Option = opt;
        OrderItem.Name = product.Name;
        OrderItem.Category = product.Category;
        OrderItem.ProductId = product.Id;

        if (!string.IsNullOrEmpty(ForOrderWithId))
        {
            if (ObjectId.TryParse(ForOrderWithId, out _))
            {
                _ = await MainService.AddItemToOrder(OrderItem, ForOrderWithId);
            }
        }
        else if (!string.IsNullOrWhiteSpace(ForUserId))
        {
            _ = await MainService.AddItemToCart(OrderItem, ForUserId, toOverride);
        }
        else
        {
            _ = await MainService.AddItemToCart(OrderItem, null, toOverride);
        }
        StateHasChanged();
    }

    async void SubtractItem(Product product, int optInx, int n = 1)
    {
        string? opt = null;
        if (optInx > -1 && product.Options?.Length > optInx)
        {
            opt = product.Options[optInx];
        }
       
        OrderItem.Id = product.Id;
        OrderItem.Qty = -Math.Abs(n);
        OrderItem.Price = product.Price;
        OrderItem.PriceType = product.PricesType;
        OrderItem.Option = opt; //todo:
        OrderItem.Name = product.Name;
        OrderItem.Category = product.Category;

        if (!string.IsNullOrEmpty(ForOrderWithId))
        {
            if (ObjectId.TryParse(ForOrderWithId, out _))
            {
                _ = await MainService.AddItemToOrder(OrderItem, ForOrderWithId);
            }
        }
        else if (!string.IsNullOrWhiteSpace(ForUserId))
        {
            _ = await MainService.AddItemToCart(OrderItem, ForUserId);
        }
        else
        {
            _ = await MainService.AddItemToCart(OrderItem);
        }
    }

    void CopyOrder()
    {
        var items = MainService.GetLastYearOrder();
        _CopyOrder.Show(items.ToArray());
    }

    async void CopyOrderOnClosed(object? sender, bool e)
    {
        if (!e) return;

        await MainService.CreateDuplicateOrder();
        StateHasChanged();
    }

    void SelectUser()
    {
        IsInUserSelection = true;
    }

    void SelectUser(User user)
    {
        State.ForUser = State.User.Id == user.Id ? null : user;
        IsInUserSelection = false;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            _CopyOrder.Closed += CopyOrderOnClosed;
            OnDisposed = () => _CopyOrder.Closed -= CopyOrderOnClosed;
        }
    }


}
