@page "/admin/order"
@page "/admin/order/{orderId}"
@inherits PageBase
@using MongoDB.Bson
@using SukkotMeNET.Models
@using SukkotMeNET.Services

<section class="py-1 bg-blueGray-50 flex-grow dark:bg-gray-800" style="min-height: 80vh;">
    @if (string.IsNullOrEmpty(InvoicePdf))
    {
        <section class="py-20 bg-white" style="min-height: 80vh;">
            <div class="px-4 mx-auto text-center max-w-7xl sm:px-6 lg:px-8">
                <h2 class="text-3xl font-extrabold tracking-tight text-green-600 my-6 sm:text-4xl md:text-5xl xl:text-6xl">
                    @Message
                </h2>
            </div>
        </section>
    }
    else
    {
        <div class="mx-auto w-full md:w-3/4 xl:w-1/2 relative">
            <NavLink href=@String.Format($"/order/{OrderId}/edit") class="h-10 w-10 rounded-full bg-gray-700 bg-opacity-50 absolute grid place-content-center">
                <i class="fa fa-pencil"></i>
            </NavLink>
            <img src=@InvoicePdf class="w-full" alt="invoice"/>
        </div>
    }
</section>


@code {
    [Parameter] public string? OrderId { get; set; }
    [Inject] public AppStateService State { get; set; }
    [Inject] public InvoiceService _InvoiceService { get; set; }
    [Inject]
    public IJSRuntime Js { get; set; }

    Order? _Order;

    string? _InvoicePdf;

    public string InvoicePdf
    {
        get => _InvoicePdf ?? string.Empty;
        set
        {
            if (string.IsNullOrEmpty(_InvoicePdf))
            {
                SetProperty(ref _InvoicePdf, value);
            }
        }
    }

    string _Message = "Loading invoice...";

    public string Message
    {
        get => _Message;
        set => SetProperty(ref _Message, value);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (ObjectId.TryParse(OrderId, out _))
        {
            try
            {
                _Order = State.AdminState.AllOrders.FirstOrDefault(o => o.Id == OrderId);


                var user = State.AdminState.AllUsers.FirstOrDefault(u => u.Id == _Order?.UserId);

                if (_Order is null || user is null)
                    throw new Exception();

                var html = _InvoiceService.GetInvoiceHtml(_Order, user);
                InvoicePdf = await Js.InvokeAsync<string>(Constants.JavaScriptFunctions.GetImageFromHTML, html);
                Message = "Invoice loaded";
            }
            catch
            {
                Message = "Error while getting invoice. Please wait a few seconds and then reload";
            }
        }
        else
        {
            Message = "Cannot find order";
        }
    }

}
