@page "/admin/order"
@page "/admin/order/{orderId}"
@inherits PageBase
@using MongoDB.Bson
@using SolidCompany.Wrappers.WkHtmlToImage
@using SukkotMeNET.Extensions
@using SukkotMeNET.Models
@using SukkotMeNET.Services

<section class="py-1 bg-blueGray-50 flex-grow dark:bg-gray-800" style="min-height:80vh;">
    @if (_Order is not null)
    {
        <div class="mx-auto mt-4 relative" style="width: fit-content;">
            <NavLink href=@string.Format($"/order/{_Order.Id}/edit") class="absolute grid place-content-center w-10 h-10 bg-gray-600 rounded-full">
                <i class="fa fa-pencil text-white"></i>
            </NavLink>
            <img width="600" class="mx-auto" src=@_InvoiceImg />
        </div>
    }
</section>


@code {
    [Parameter] public string? OrderId { get; set; }
    [Inject] public AppStateService State { get; set; }
    [Inject] public InvoiceService _InvoiceService { get; set; }
    [Inject] public IHtmlToImage HtmlToImage { get; set; }
    [Inject] public MainStateService Service { get; set; }

    Order? _Order;

    string? _InvoiceHtml;
    string? _InvoiceImg;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (ObjectId.TryParse(OrderId, out _))
        {
            _Order = State.AdminState.AllOrders.FirstOrDefault(o => o.Id == OrderId);
            var user = State.AdminState.AllUsers.FirstOrDefault(u => u.Id == _Order.UserId);

            if (_Order is null || user is null)
                return;

            _InvoiceHtml = _InvoiceService.GetInvoiceHtml(_Order, user);
            var stream = await HtmlToImage.CreateImageAsync(_InvoiceHtml, 800, ImageFormat.Jpg);

            using var ms = new MemoryStream();
            stream.CopyTo(ms);
            _InvoiceImg = $"data:image/jpg;base64,{Convert.ToBase64String(ms.ToArray())}";
            StateHasChanged();
        }
    }
}
