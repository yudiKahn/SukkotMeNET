@page "/admin/stock"
@inherits PageBase
@using SukkotMeNET.Models
@using SukkotMeNET.Services

<div class="w-full py-20">
    <div class="max-w-sm w-full mx-auto bg-white rounded-lg shadow dark:bg-gray-800 p-4 md:p-6">
        <div class="flex justify-between pb-4 mb-4 border-b border-gray-200 dark:border-gray-700">
            <div class="flex items-center">
                <div>
                    <h5 class="leading-none text-2xl font-bold text-gray-900 dark:text-white pb-1">
                        @($"{ItemsBought:N1}")
                    </h5>
                    <p class="text-sm font-normal text-gray-500 dark:text-gray-400">
                        Items soled-out this year
                    </p>
                </div>
            </div>
            <div>
                <span class="bg-green-100 text-green-800 text-xs font-medium inline-flex items-center px-2.5 py-1 rounded-md dark:bg-green-900 dark:text-green-300">
                    <svg class="w-2.5 h-2.5 me-1.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 14">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13V1m0 0L1 5m4-4 4 4" />
                    </svg>
                    42.5%
                </span>
            </div>
        </div>

        <div class="grid grid-cols-2">
            <dl class="flex items-center">
                <dt class="text-gray-500 dark:text-gray-400 text-sm font-normal me-1">Money spent:</dt>
                <dd class="text-gray-900 text-sm dark:text-white font-semibold">$3,232</dd>
            </dl>
            <dl class="flex items-center justify-end">
                <dt class="text-gray-500 dark:text-gray-400 text-sm font-normal me-1">Conversion rate:</dt>
                <dd class="text-gray-900 text-sm dark:text-white font-semibold">1.2%</dd>
            </dl>
        </div>

        <div id="column-chart"></div>
        <div class="grid grid-cols-1 items-center border-gray-200 border-t dark:border-gray-700 justify-between">
            <div class="flex justify-between items-center pt-5">

            </div>
        </div>
    </div>
</div>

<div class="fixed bottom-0 right-0 m-3 flex" @onclick="OnAddClick">
    @if (ShowStockInput)
    {
        <div @onclick:stopPropagation="true"
             class="bg-green-500 text-white rounded-lg h-auto sm:h-12 w-auto px-2 flex shadow-md absolute z-0 right-3 bottom-0">
            <div class="block sm:flex my-2 mr-12 text-black">
                <select style="outline: 0;" @onchange="OnProdChanged">
                    <option value="Product" disabled></option>
                    @foreach (var prod in State.Products)
                    {
                        <option value="@prod.Id">@prod.Name</option>
                    }
                </select>
                <input class="m-1" type="number" placeholder="Qty"/>
            </div>
        </div>
    }
    <div 
        class="shadow-lg w-12 h-12 grid place-content-center bg-green-500 rounded-full z-10">
        <i class="text-white text-lg fa fa-plus"></i>
    </div>
</div>




@code {

    [Inject]
    public IJSRuntime Js { get; set; }

    [Inject] 
    public AppStateService State { get; set; }

    public bool ShowStockInput { get; set; }
    public string Pid { get; set; }
    public int Qty { get; set; }


    double _ItemsBought;

    public double ItemsBought
    {
        get => _ItemsBought;
        set => SetProperty(ref _ItemsBought, value);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            var data = await MainService.GetStockData();
            ItemsBought = data.Sum(kv => kv.Value);

            var opt = BuildChartOptions(data, data);
            await Js.InvokeVoidAsync(
                Constants.JavaScriptFunctions.RenderStockChart, opt);
        }
    }

    object BuildChartOptions(
        Dictionary<string, int> sale,
        Dictionary<string, int> inStock)
    {
        var stockColor = "#1A56DB";
        var saleColor = "#FDBA8C";

        return InsertData([
            new()
            {
                Name = "Sale",
                Color = saleColor,
                Data = sale
                    .Select(d => new ChartVector2d(d.Key, d.Value))
                    .ToList()
            },
            new()
            {
                Name = "In-Stock",
                Color = stockColor,
                Data = inStock
                    .Select(d => new ChartVector2d(d.Key, d.Value))
                    .ToList()
            }
        ]);
    }

    object InsertData(ChartSeriesModel[] series)
    {
        var chartConfig = new
        {
            colors = new[] { "#1A56DB", "#FDBA8C" },
            series,
            chart = new
            {
                type = "bar",
                height = "320px",
                fontFamily = "Inter, sans-serif",
                toolbar = new
                {
                    show = false
                }
            },
            plotOptions = new
            {
                bar = new
                {
                    horizontal = false,
                    columnWidth = "70%",
                    borderRadiusApplication = "end",
                    borderRadius = 8
                }
            },
            tooltip = new
            {
                shared = true,
                intersect = false,
                style = new
                {
                    fontFamily = "Inter, sans-serif"
                }
            },
            states = new
            {
                hover = new
                {
                    filter = new
                    {
                        type = "darken",
                        value = 1
                    }
                }
            },
            stroke = new
            {
                show = true,
                width = 0,
                colors = new[] { "transparent" }
            },
            grid = new
            {
                show = false,
                strokeDashArray = 4,
                padding = new
                {
                    left = 2,
                    right = 2,
                    top = -14
                }
            },
            dataLabels = new
            {
                enabled = false
            },
            legend = new
            {
                show = false
            },
            xaxis = new
            {
                floating = false,
                labels = new
                {
                    show = true,
                    style = new
                    {
                        fontFamily = "Inter, sans-serif",
                        cssClass = "text-xs font-normal fill-gray-500 dark:fill-gray-400"
                    }
                },
                axisBorder = new
                {
                    show = false
                },
                axisTicks = new
                {
                    show = false
                }
            },
            yaxis = new
            {
                show = false
            },
            fill = new
            {
                opacity = 1
            }
        };

        return chartConfig;
    }

    void OnProdChanged(ChangeEventArgs obj)
    {
        if (obj.Value is not string pid || string.IsNullOrWhiteSpace(pid)) return;


    }

    void OnAddClick()
    {
        if (ShowStockInput)
        {

        }
        ShowStockInput = !ShowStockInput;
    }

}
