@page "/order/{orderId}/edit"
@using SukkotMeNET.Models
@using SukkotMeNET.Extensions
@using MongoDB.Bson
@using SukkotMeNET.Services

<div class="w-full bg-white py-3 flex-grow dark:bg-gray-800" style="min-height: 80vh;">
    <div class="container mx-auto px-5 lg:w-1/2 xl:w-1/3">
        @if (_Order is not null)
        {
            <div class="rounded-lg shadow-lg overflow-hidden">
                <div class="px-6 py-8 bg-white sm:p-10 sm:pb-6">
                    <h3 class="text-2xl leading-8 font-extrabold text-gray-900 sm:text-3xl sm:leading-9">
                        Order #@_Order.Id[..6]
                    </h3>
                    <small>
                        Paid: <i class=@string.Format("fa fa-{0} text-gray-900", _Order.IsPaid ? "check" : "times")></i>
                        &nbsp;
                        Packed: <i class=@string.Format("fa fa-{0} text-gray-900", _Order.IsPacked ? "check" : "times")></i>
                        &nbsp;
                        Shipped: <i class=@string.Format("fa fa-{0} text-gray-900", _Order.IsShipped ? "check" : "times")></i>
                    </small>

                    <div class="mt-8">

                        <ul class="pl-0">
                            @foreach (var item in _Order.Items)
                            {
                                <li class="mb-4">
                                    <div class="flex items-start">
                                        <div class="text-base leading-6 flex flex-col md:flex-row flex-wrap flex-grow justify-between items-baseline">
                                            <div class="text-gray-700 flex-shrink-0">
                                                <i class="fa fa-trash mr-2 text-red-200 cursor-pointer" style="font-size: 13px;"></i> 
                                                @item.Name <small>@item.PriceType @item.Option</small>
                                            </div>
                                            <div class="flex-shrink-0 mt-1 md:mt-0">
                                                <small class="ml-5 mr-3">@item.Qty &times; @($"{item.Price:N2}") = </small>
                                                <span class="text-lg text-gray-800 font-bold">
                                                    $@((item.Qty * item.Price).ToString("N1"))
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                </li>
                            }


                            <li class="mt-10">
                                <div class="flex justify-end">
                                    Total: &nbsp;&nbsp;
                                    <span class="text-lg text-gray-800 font-bold">$@_Order.Items.GetTotal().ToString("N2")</span>
                                </div>
                            </li>
                            @if (_Order.Comment?.Any() == true)
                            {
                                <li class="mt-5">
                                    <div>Comment:</div>
                                    <p>&#8220;@(_Order.Comment)&#8221;</p>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
                <div class="px-6 pt-6 pb-8 bg-gray-100 sm:p-10 sm:pt-6">
                    <button @onclick="() => _AddingItem = true" class="w-full rounded-md flex items-center justify-center px-5 py-3 border border-solid border-green-700 text-lg leading-6 font-medium rounded-md text-green-700">
                        Add item
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@if (_AddingItem)
{
    <div class="absolute w-full min-h-screen top-0 z-50 bg-opacity-50 bg-white">
        <span class="absolute right-5 top-3">
            <bold><i class="fa fa-times fa-2x cursor-pointer" @onclick="() => _AddingItem = false"></i></bold>
        </span>
        <Shop ForOrderWithId=@OrderId/>
    </div>
}

@code {
    [Parameter]
    public string? OrderId { get; set; }
    [Inject]
    public MainStateService Service { get; set; }
    [Inject]
    public AppStateService State { get; set; }

    Order? _Order;
    bool _AddingItem;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            Service.StateHasChanged += (e, s) => InvokeAsync(StateHasChanged);
        }

        if (ObjectId.TryParse(OrderId, out _))
        {
            var oldOrderId = _Order?.Id;
            _Order = State.UserOrders.FirstOrDefault(o => o.Id == OrderId);
            if (_Order?.Id != oldOrderId)
                InvokeAsync(StateHasChanged);
        }
    }
}
