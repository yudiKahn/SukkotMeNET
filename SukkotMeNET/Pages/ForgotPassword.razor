@page "/forgotpassword"
@page "/forgotpassword/{Id}"
@using MongoDB.Bson
@using MongoDB.Driver
@using SukkotMeNET.Extensions
@using SukkotMeNET.Interfaces
@using SukkotMeNET.Models
@using SukkotMeNET.Services

<PageTitle>SukkotMe | Reset Password</PageTitle>


<section class="w-full px-2 py-20 bg-gray-100 xl:px-8 flex-grow dark:bg-gray-700">
    <div class="max-w-5xl mx-auto py-16">
        <div class="grid" style="place-items:center;">

            <div class="w-full mt-16 md:mt-0 md:w-2/5">
                <div class="relative z-10 h-auto p-8 py-10 overflow-hidden bg-white dark:bg-gray-800 border-b-2 border-gray-300 dark:border-gray-900 rounded-lg shadow-2xl px-7">
                    <div>
                        @if (Id.IsNullOrBlank())
                        {
                            <h3 class="mb-6 text-2xl font-medium text-center dark:text-gray-300">
                                Enter your associated email address
                            </h3>
                            <input type="email" @bind-value="@EmailAddress" class="block w-full px-4 py-3 mb-4 border border-2 border-transparent border-gray-200 rounded-lg focus:ring focus:ring-green-500 focus:outline-none" placeholder="Email address" />
                            <div class="block">
                                <button class="w-full px-3 py-4 font-medium text-white bg-green-600 rounded-lg"
                                    type="submit" @onclick="SendEmail">
                                    Send me
                                </button>
                            </div>
                            <p class="w-full mt-4 text-sm text-center text-gray-500">
                                <NavLink href="/login">Login</NavLink>
                            </p>
                        }
                        else if (ObjectId.TryParse(Id, out var objId))
                        {
                            <h3 class="mb-6 text-2xl font-medium text-center dark:text-gray-300">
                                Enter new password
                            </h3>
                            <input type="password" placeholder="New password" @bind-value="@NewPassword" class="block w-full px-4 py-3 mb-4 border border-2 border-transparent border-gray-200 rounded-lg focus:ring focus:ring-green-500 focus:outline-none" />
                            <div class="block">
                                <button class="w-full px-3 py-4 font-medium text-white bg-green-600 rounded-lg"
                                    type="submit" @onclick="ResetPassword">
                                    Save
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>



@code {
    [Inject] IRepositoryService RepositoryService { get; set; }
    [Inject] NavigationManager Navigation { get; set; }
    [Inject] MainService MainService { get; set; }
    [Inject] EmailService EmailService { get; set; }

    [Parameter]
    public string Id { get; set; }

    string EmailAddress { get; set; }
    string NewPassword { get; set; }

    protected override async Task OnInitializedAsync()
    {
        MainService.StateHasChanged += (sender, e) => InvokeAsync(this.StateHasChanged);

        if (ObjectId.TryParse(Id, out var objId))
        {
            var user = await RepositoryService.UsersRepository.ReadFirstAsync(u => u.Id == Id);
            if (user == null)
            {
                Navigation.NavigateTo("/login");
            }
            else
            {

            }
        }
    }

    async void SendEmail()
    {
        try
        {
            if (EmailAddress.IsNullOrBlank())
                throw new Exception("Please fill eamil address");

            var user = await RepositoryService.UsersRepository.ReadFirstAsync(u => u.Email == EmailAddress);
            if (user == null)
                throw new Exception("No user with this email address");

            var html = string.Concat("<a href=", '"', $"https://localhost:7043/forgotpassword/{user.Id}", '"', ">Link for reseting your SukkotMe password</a>");
            var isEmailSend = await EmailService.SendAsync("SukkotMe Reset password", html, EmailAddress);
            if (!isEmailSend)
                throw new Exception("We can't send you mail. contact developer");

            MainService.AddAlert(new Alert("Info", "Check your mailbox", AlertType.Information));
        }
        catch (Exception e)
        {            
            MainService.AddAlert(new Alert("Error", e.Message, AlertType.Error));
        }
    }

    async void ResetPassword()
    {
        try
        {
            if (NewPassword.IsNullOrBlank())
                throw new Exception("Please enter new password");

            var user = await RepositoryService.UsersRepository.ReadFirstAsync(u => u.Id == Id);
            if (user == null)
                throw new Exception("Unknown error accourd, please contact developer");

            user.Password = BCrypt.Net.BCrypt.HashPassword(NewPassword);
            await RepositoryService.UsersRepository.UpdateFirstAsync(u => u.Id == Id, user);

            Navigation.NavigateTo("/login");
        }
        catch (Exception e)
        {
            MainService.AddAlert(new Alert("Error", e.Message, AlertType.Error));
        }
    }
}
