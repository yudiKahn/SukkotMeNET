@using SukkotMeNET.Pages
@using SukkotMeNET.Services
@using SukkotMeNET.Models

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" >
                <NotAuthorized>
                    <Login/>
                </NotAuthorized>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <PageTitle>404 | Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <div class="relative overflow-hidden bg-white dark:bg-gray-900 flex-grow">
                    <div class="container mx-auto px-6 md:px-12 relative z-10 flex py-32 xl:py-40">
                        <h1 class="drop-shadow-lg text-4xl font-extrabold tracking-tight text-green-600 sm:text-5xl md:text-4xl lg:text-5xl xl:text-6xl animate-bounce">
                            404 | Page Not Found...
                            <br />
                            <small style="font-size:20px;" class="text-gray-700">Go back 
                                <NavLink href="/">Home</NavLink>
                           </small>
                        </h1>
                    </div>
                </div>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code{
    [Inject]
    IJSRuntime _Js { get; set; }
    [Inject]
    MainStateService _Service { get; set; }
    [Inject]
    AppStateService _State { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _State.IsLoading = true;
        StateHasChanged();
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        try
        {
            if (_State.User?.Id?.Any() == true)
                return;

            var token = await _Js.InvokeAsync<string>(Constants.JavaScriptFunctions.LocalStorageGet, "token");
            if (token != null)
            {
                // _Service.AddAlert(new Alert("Hello", "We recognize you've already been here. Trying to log you in..."));
                var isTokenValid = await _Service.LoginUserFromLocalStorage(token);
                if (!isTokenValid)
                    throw new Exception("Token not valid");
                
                StateHasChanged();
                // _Service.AddAlert(new Alert("Login successful", "Welcome back!", AlertType.Success));
            }
        }
        catch (Exception e)
        {
            if (e is not TimeoutException)
                await _Js.InvokeVoidAsync(Constants.JavaScriptFunctions.LocalStorageRemove, "token");

            _Service.AddAlert(new Alert("Fail", e.Message, AlertType.Error));
        }
        finally
        {
            _State.IsLoading = false;
        }
    }
}